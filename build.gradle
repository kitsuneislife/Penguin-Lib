plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
}

ext.build_number=""
if (System.getenv().BUILD_NUMBER) {
    ext.build_number="-" + System.getenv().BUILD_NUMBER
}

version = "${minecraft_version}-${mod_version}${build_number}"
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "Forge"
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        // Jared's Maven (JEI)
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev/"
    }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'
    // Temporarily commenting out JEI to test PenguinLib alone
    // compileOnly("mezz.jei:jei-1.20.1-common-api:${jei_version}")
    // compileOnly("mezz.jei:jei-1.20.1-forge-api:${jei_version}")
    // runtimeOnly("mezz.jei:jei-1.20.1-forge:${jei_version}")
    compileOnly files("libs/rhino-forge-2001.2.3-build.10.jar")
}

minecraft {
    mappings channel: 'official', version: '1.20.1'
    
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                penguinlib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                penguinlib {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                penguinlib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'penguinlib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                penguinlib {
                    source sourceSets.main
                }
            }
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            rhino_version           : rhino_version,
            rhino_version_range     : rhino_version_range,
            mod_id                  : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors             : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = mod_name.replace(" ", "-")
            from components.java
        }
    }
    repositories {
        if (project.hasProperty('mavenRepository')) {
            maven { url mavenRepository }
        } else {
            mavenLocal()
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
